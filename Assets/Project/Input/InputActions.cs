//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Project/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""8a8a4774-da4e-4e5b-98a0-a00b4ac3bc35"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""4eddad19-9897-4195-b825-7a2408005bbd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""259f1dea-4ed4-4e11-9aa6-bc8635a3c1e3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""4c123da0-cd92-43e5-97b5-5282f23fd592"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6855966e-e34b-4173-98e6-176dfdb0ac28"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""27cf9e1c-0dfc-43be-88a4-ae9de4be4019"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f39ce5f8-1eb4-44c3-94f5-46ffdbd3d469"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eacd8875-7ad2-4861-b911-1142435e567f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FireWeapon"",
            ""id"": ""63bd2b19-cd33-4d24-a917-0e606cafdcc7"",
            ""actions"": [
                {
                    ""name"": ""FireArrow"",
                    ""type"": ""Button"",
                    ""id"": ""024f8f46-3ce7-4bd5-807d-222d5076f598"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FireBomb"",
                    ""type"": ""Button"",
                    ""id"": ""25748e73-8af3-4eb9-b3e7-5d302885172c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireLightning"",
                    ""type"": ""Button"",
                    ""id"": ""f1c057b0-bf8a-4bf7-8289-d0b8c87b0497"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d126680-9ac4-4af7-bb2b-e3d15a5a60d9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ba7a84c-9ec0-4156-bc0c-ad2f40cb23e7"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""217a268b-57a3-4419-8a49-6b6469d5db5e"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireLightning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Configs"",
            ""id"": ""9268240c-d794-46ab-b204-50589ac0972c"",
            ""actions"": [
                {
                    ""name"": ""RotationSpeed"",
                    ""type"": ""Button"",
                    ""id"": ""84145b54-7fb8-46b1-9e40-007b307e2467"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenGameMenu"",
                    ""type"": ""Button"",
                    ""id"": ""8d7b100c-2ece-4313-84f4-55c018214d6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToMainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c8cf5df2-6e24-4159-b0eb-4a457b23d449"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadLevel"",
                    ""type"": ""Button"",
                    ""id"": ""325de538-7931-4f3e-bb21-91638d0c2718"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ee7e1d2-e246-4ac9-9434-b8aaf33306a7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""908ec5e4-ef64-4cef-873b-d8692b7fe988"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenGameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab5148f6-902f-45a4-8e23-f5777fa44fa4"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""049d73a4-2bb5-4635-8513-e8ad2a89e91a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ControlScheme"",
            ""bindingGroup"": ""ControlScheme"",
            ""devices"": []
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Walk = m_Movement.FindAction("Walk", throwIfNotFound: true);
        // FireWeapon
        m_FireWeapon = asset.FindActionMap("FireWeapon", throwIfNotFound: true);
        m_FireWeapon_FireArrow = m_FireWeapon.FindAction("FireArrow", throwIfNotFound: true);
        m_FireWeapon_FireBomb = m_FireWeapon.FindAction("FireBomb", throwIfNotFound: true);
        m_FireWeapon_FireLightning = m_FireWeapon.FindAction("FireLightning", throwIfNotFound: true);
        // Configs
        m_Configs = asset.FindActionMap("Configs", throwIfNotFound: true);
        m_Configs_RotationSpeed = m_Configs.FindAction("RotationSpeed", throwIfNotFound: true);
        m_Configs_OpenGameMenu = m_Configs.FindAction("OpenGameMenu", throwIfNotFound: true);
        m_Configs_GoToMainMenu = m_Configs.FindAction("GoToMainMenu", throwIfNotFound: true);
        m_Configs_ReloadLevel = m_Configs.FindAction("ReloadLevel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Walk;
    public struct MovementActions
    {
        private @InputActions m_Wrapper;
        public MovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Movement_Walk;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // FireWeapon
    private readonly InputActionMap m_FireWeapon;
    private List<IFireWeaponActions> m_FireWeaponActionsCallbackInterfaces = new List<IFireWeaponActions>();
    private readonly InputAction m_FireWeapon_FireArrow;
    private readonly InputAction m_FireWeapon_FireBomb;
    private readonly InputAction m_FireWeapon_FireLightning;
    public struct FireWeaponActions
    {
        private @InputActions m_Wrapper;
        public FireWeaponActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FireArrow => m_Wrapper.m_FireWeapon_FireArrow;
        public InputAction @FireBomb => m_Wrapper.m_FireWeapon_FireBomb;
        public InputAction @FireLightning => m_Wrapper.m_FireWeapon_FireLightning;
        public InputActionMap Get() { return m_Wrapper.m_FireWeapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FireWeaponActions set) { return set.Get(); }
        public void AddCallbacks(IFireWeaponActions instance)
        {
            if (instance == null || m_Wrapper.m_FireWeaponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FireWeaponActionsCallbackInterfaces.Add(instance);
            @FireArrow.started += instance.OnFireArrow;
            @FireArrow.performed += instance.OnFireArrow;
            @FireArrow.canceled += instance.OnFireArrow;
            @FireBomb.started += instance.OnFireBomb;
            @FireBomb.performed += instance.OnFireBomb;
            @FireBomb.canceled += instance.OnFireBomb;
            @FireLightning.started += instance.OnFireLightning;
            @FireLightning.performed += instance.OnFireLightning;
            @FireLightning.canceled += instance.OnFireLightning;
        }

        private void UnregisterCallbacks(IFireWeaponActions instance)
        {
            @FireArrow.started -= instance.OnFireArrow;
            @FireArrow.performed -= instance.OnFireArrow;
            @FireArrow.canceled -= instance.OnFireArrow;
            @FireBomb.started -= instance.OnFireBomb;
            @FireBomb.performed -= instance.OnFireBomb;
            @FireBomb.canceled -= instance.OnFireBomb;
            @FireLightning.started -= instance.OnFireLightning;
            @FireLightning.performed -= instance.OnFireLightning;
            @FireLightning.canceled -= instance.OnFireLightning;
        }

        public void RemoveCallbacks(IFireWeaponActions instance)
        {
            if (m_Wrapper.m_FireWeaponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFireWeaponActions instance)
        {
            foreach (var item in m_Wrapper.m_FireWeaponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FireWeaponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FireWeaponActions @FireWeapon => new FireWeaponActions(this);

    // Configs
    private readonly InputActionMap m_Configs;
    private List<IConfigsActions> m_ConfigsActionsCallbackInterfaces = new List<IConfigsActions>();
    private readonly InputAction m_Configs_RotationSpeed;
    private readonly InputAction m_Configs_OpenGameMenu;
    private readonly InputAction m_Configs_GoToMainMenu;
    private readonly InputAction m_Configs_ReloadLevel;
    public struct ConfigsActions
    {
        private @InputActions m_Wrapper;
        public ConfigsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotationSpeed => m_Wrapper.m_Configs_RotationSpeed;
        public InputAction @OpenGameMenu => m_Wrapper.m_Configs_OpenGameMenu;
        public InputAction @GoToMainMenu => m_Wrapper.m_Configs_GoToMainMenu;
        public InputAction @ReloadLevel => m_Wrapper.m_Configs_ReloadLevel;
        public InputActionMap Get() { return m_Wrapper.m_Configs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConfigsActions set) { return set.Get(); }
        public void AddCallbacks(IConfigsActions instance)
        {
            if (instance == null || m_Wrapper.m_ConfigsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConfigsActionsCallbackInterfaces.Add(instance);
            @RotationSpeed.started += instance.OnRotationSpeed;
            @RotationSpeed.performed += instance.OnRotationSpeed;
            @RotationSpeed.canceled += instance.OnRotationSpeed;
            @OpenGameMenu.started += instance.OnOpenGameMenu;
            @OpenGameMenu.performed += instance.OnOpenGameMenu;
            @OpenGameMenu.canceled += instance.OnOpenGameMenu;
            @GoToMainMenu.started += instance.OnGoToMainMenu;
            @GoToMainMenu.performed += instance.OnGoToMainMenu;
            @GoToMainMenu.canceled += instance.OnGoToMainMenu;
            @ReloadLevel.started += instance.OnReloadLevel;
            @ReloadLevel.performed += instance.OnReloadLevel;
            @ReloadLevel.canceled += instance.OnReloadLevel;
        }

        private void UnregisterCallbacks(IConfigsActions instance)
        {
            @RotationSpeed.started -= instance.OnRotationSpeed;
            @RotationSpeed.performed -= instance.OnRotationSpeed;
            @RotationSpeed.canceled -= instance.OnRotationSpeed;
            @OpenGameMenu.started -= instance.OnOpenGameMenu;
            @OpenGameMenu.performed -= instance.OnOpenGameMenu;
            @OpenGameMenu.canceled -= instance.OnOpenGameMenu;
            @GoToMainMenu.started -= instance.OnGoToMainMenu;
            @GoToMainMenu.performed -= instance.OnGoToMainMenu;
            @GoToMainMenu.canceled -= instance.OnGoToMainMenu;
            @ReloadLevel.started -= instance.OnReloadLevel;
            @ReloadLevel.performed -= instance.OnReloadLevel;
            @ReloadLevel.canceled -= instance.OnReloadLevel;
        }

        public void RemoveCallbacks(IConfigsActions instance)
        {
            if (m_Wrapper.m_ConfigsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConfigsActions instance)
        {
            foreach (var item in m_Wrapper.m_ConfigsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConfigsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConfigsActions @Configs => new ConfigsActions(this);
    private int m_ControlSchemeSchemeIndex = -1;
    public InputControlScheme ControlSchemeScheme
    {
        get
        {
            if (m_ControlSchemeSchemeIndex == -1) m_ControlSchemeSchemeIndex = asset.FindControlSchemeIndex("ControlScheme");
            return asset.controlSchemes[m_ControlSchemeSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnWalk(InputAction.CallbackContext context);
    }
    public interface IFireWeaponActions
    {
        void OnFireArrow(InputAction.CallbackContext context);
        void OnFireBomb(InputAction.CallbackContext context);
        void OnFireLightning(InputAction.CallbackContext context);
    }
    public interface IConfigsActions
    {
        void OnRotationSpeed(InputAction.CallbackContext context);
        void OnOpenGameMenu(InputAction.CallbackContext context);
        void OnGoToMainMenu(InputAction.CallbackContext context);
        void OnReloadLevel(InputAction.CallbackContext context);
    }
}
